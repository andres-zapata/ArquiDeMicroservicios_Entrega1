swagger: "2.0"
info:
  description: "youtube"
  version: "1.0.0"
  title: "Youtube"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "youtube.swagger.io"
basePath: "/v2"
tags:
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
- name: "listaDeReproduccion"
  description: "Operaciones relacionadas a la lista de reproduccion"
- name: "profile"
  description: "Operaciones relacionadas a perfil de usuarios"
schemes:
- "https"
- "http"
paths:
  /listaDeReproduccion:
    post:
      tags:
      - "listaDeReproduccion"
      summary: "añade "
      description: ""
      operationId: "creaPlaylist"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "nombre"
        in: "body"
        description: "se crea la lista de reproduccion"
        required: true
        schema:
          $ref: "#/definitions/Video1"
      responses:
        "405":
          description: "Campos invalidos"
        "200":
          description: "La lista de reproduccion a sido añadida correctamente"
    delete:
      tags:
      - "listaDeReproduccion"
      summary: "Borrar un video a partir de su id"
      description: ""
      operationId: "deletePlaylist"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Borra lista de reproduccion"
        required: true
        schema:
          $ref: "#/definitions/Video1"
      responses:
        "200":
          description: "Operacion exitosa"
          schema:
            $ref: "#/definitions/Video1"
        "400":
          description: "ID incorrecto"
        "404":
          description: "Video no encontrado"
    get:
      tags:
      - "listaDeReproduccion"
      summary: "añade "
      description: ""
      operationId: "getPlaylist"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Obtener la lista de reproduccion"
        required: true
        schema:
          $ref: "#/definitions/Video1"
      responses:
        "405":
          description: "Campos invalidos"
        "200":
          description: "El usuario a sido creado correctamente"
  /listaDeReproduccion/{id}/:
    delete:
      tags:
      - "listaDeReproduccion"
      summary: "Borrar un video a partir de su id"
      description: "Para una respuesta correcta se necesita el id del video a encontrar"
      operationId: "getVideoById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID del usuario es necesario para la busqueda"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Operacion exitosa"
          schema:
            $ref: "#/definitions/Video1"
        "400":
          description: "ID incorrecto"
        "404":
          description: "Video no encontrado"
    post:
      tags:
      - "listaDeReproduccion"
      summary: "añade "
      description: ""
      operationId: "addVideoToPlaylist"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID del usuario es necesario para la busqueda"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "405":
          description: "Campos invalidos"
        "200":
          description: "El video a sido añadido correctamente"

  /profile:
    get:
      tags:
      - "perfil"
      summary: "Traer elementos del perfil de usuario"
      description: "Trae todos los elementos asociados a la vista de perfil"
      operationId: "getDataProfile"
      produces:
      - "application/json"
      parameters:
      - name: "profilePhoto"
        in: "query"
        description: "Trae Foto de perfil asociada"
        required: true
        type: "array"
        items:
          type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        "400":
          description: "Foto no encotrada"
  /profile/{id}:
    get:
      tags:
        - "profile"
        summary: "Encontrar un perfil a partir de su id de usuario"
        description: ""
        operationId: "getProfileById"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - name: "id"
          in: "path"
          description: "Id de perfil necesaria"
          required: true
          type: "integer"
          maximum: 10.0
          minimum: 1.0
          format: "int64"
        responses:
          "200":
            description: "Ok"
            schema:
              $ref: "#/definitions/User"
          "400":
            description: "ID incorrecto"
          "404":
            description: "Perfil no encontrado"
    put:
      tags:
      - "user"
      summary: "Actualizar perfil usuario"
      description: ""
      operationId: "updateProfileUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Id del Perfil usuario para modificarlo"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      - in: "body"
        name: "body"
        description: "Campos a modificar"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "id no encontrado"
        "404":
          description: "perfil no existe"
        "405":
          description: "Error"
    delete:
      tags:
        - "Profile"
      summary: "Eliminar foto de Perfil"
      description: ""
      operationId: "deleteProfileUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Id Foto de perfil a eliminar"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "400":
          description: "ID invalida"
        "404":
          description: "Usuario no econtrado"
        "204":
          description: "Eliminado correctamente"

    /videos/:
    get:
      tags:
      - "videos"
      summary: "devuelve todos los videos presentes en la aplicación"
      description: "devuelve una lista de los vídeos ordenados por nombre alfabetico"
      operationId: "getVideos"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "object"
              format: "int32"
      security:
      - api_key: []
    post:
      tags:
      - "videos"
      summary: "sube un video"
      description: ""
      operationId: "putVideo"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "video a subir"
        required: true
        schema:
          $ref: "#/definitions/Video"
      responses:
        "200":
          description: "archivo cargado con éxito"
        "400":
          description: "fallo al subir el archivo"
  /videos/{videoId}:
    delete:
      tags:
      - "videos"
      summary: "elimina vídeo"
      description: "elimina el vídeo ingresado por parámetro"
      operationId: "delVideo"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "videoId"
        description: "vídeo a borrar"
        type: "integer"
        required: true
        format: "int64"
      responses:
        "200":
          description: "archivo eliminado con éxito"
        "400":
          description: "No se puede eliminar el archivo"
        "404":
          description: "no se encuentra el archivo a eliminar"
    get:
      tags:
      - "videos"
      summary: "entrega video"
      description: "busca en específico el vídeo contenido en el parámetro"
      operationId: "srchVideo"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "videoId"
        description: "vídeo a borrar"
        type: "integer"
        required: true
        format: "int64"
      responses:
        "200":
          description: "archivo encontrado"
        "404":
          description: "no se encuentra el archivo"
    put:
      tags:
      - "videos"
      summary: "edita video"
      description: "edita los parámetros del vídeo contenido en los parámetros"
      operationId: "editVideo"
      produces:
      - "application/json"
      parameters:
      - name: "videoId"
        in: "path"
        description: "vídeo a borrar"
        type: "integer"
        required: true
        format: "int64"
      - in: "body"
        name: "body"
        description: "edición de video"
        required: true
        schema:
          $ref: "#/definitions/Video"
      responses:
        "200":
          description: "archivo editado con éxito"
        "400":
          description: "no se pudo editar el vídeo"
        "404":
          description: "no se encuentra el archivo a editar"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Video:
    type: "object"
    properties:
      videoId:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Video1: 
    type: "object"
    required:
    - "ruta"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "cumpleaños de lillo"
    xml:
      name: "Video1"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Profile:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "object"
        example: "user"
    xml:
      name: "Profile"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"